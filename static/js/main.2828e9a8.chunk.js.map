{"version":3,"sources":["components/ContactForm.js","components/NavBar.js","components/ContactTable.js","helpers/utils.js","components/App.js","index.js"],"names":["ContactForm","props","visible","onClose","values","onFinish","loading","title","width","bodyStyle","paddingBottom","footer","style","textAlign","onClick","marginRight","type","form","htmlType","layout","id","initialValues","hideRequiredMark","Item","name","hidden","gutter","span","label","rules","required","message","placeholder","NavBar","handleAdd","className","offset","ContactTable","list","handleEdit","handleDelete","map","contact","index","username","email","street","city","zipcode","phone","website","color","url","getContacts","a","fetch","response","json","data","console","log","deleteContact","method","apiRequest","Type","addUrl","addInUrl","option","headers","Accept","body","JSON","stringify","apiData","App","useState","setList","setVisible","setValues","setLoading","ContactID","setNewContactID","showDrawer","inputs","findIndex","item","updatedList","filter","useEffect","loadData","formatList","address","contactId","active","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2828e9a8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n//Use ant design components\r\nimport { Drawer, Form, Button, Col, Row, Input } from \"antd\";\r\n\r\n//Side drawer contains the form for adding / updating the contact\r\nconst ContactForm = (props) => {\r\n\r\n  const { visible, onClose, values, onFinish, loading } = props;\r\n\r\n  return (\r\n    <>\r\n      {visible && (\r\n        <div>\r\n                                                                                         {/* Side drawer */}\r\n          <Drawer\r\n            title=\"Contact\"\r\n            width={720}\r\n            onClose={onClose}\r\n            visible={visible}\r\n            bodyStyle={{ paddingBottom: 80 }}\r\n            footer={\r\n              <div\r\n                style={{\r\n                  textAlign: \"right\",\r\n                }}\r\n              >\r\n\r\n                <Button onClick={onClose} style={{ marginRight: 8 }}>\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  type=\"primary\"\r\n                  form=\"contact-form\"\r\n                  htmlType=\"submit\"\r\n                  loading={loading}\r\n                >\r\n                  Save\r\n                </Button>\r\n              </div>\r\n            }\r\n          >\r\n\r\n                                                                                                {/* Form  */}\r\n            <Form\r\n              layout=\"vertical\"\r\n              id=\"contact-form\"\r\n              initialValues={values}\r\n              onFinish={onFinish}\r\n              hideRequiredMark\r\n            >\r\n                                                                                               {/* User ID */}\r\n              <Form.Item name=\"id\" hidden> </Form.Item>\r\n              <Row gutter={16}>\r\n                {/* Input User Name */}\r\n                <Col span={12}>\r\n                  <Form.Item\r\n                    name=\"username\"\r\n                    label=\"Name\"\r\n                    rules={[{ required: true, message: \"Name is Required\" }]}\r\n                  >\r\n                    <Input placeholder=\"Please enter name\" />\r\n                  </Form.Item>\r\n                </Col>\r\n                                                                                   {/* Input Website Name / Link */}\r\n                <Col span={12}>\r\n                  <Form.Item\r\n                    name=\"website\"\r\n                    label=\"Website\"\r\n                    rules={[{ required: true, message: \"URL is Required\" }]}\r\n                  >\r\n                    <Input placeholder=\"Please enter url\" />\r\n                  </Form.Item>\r\n                </Col>\r\n              </Row>\r\n              <Row gutter={16}>\r\n                                                                                        {/* Input Email */}\r\n                <Col span={12}>\r\n                  <Form.Item\r\n                    name=\"email\"\r\n                    label=\"Email\"\r\n                    rules={[{ required: true, message: \"Email is Required\" }]}\r\n                  >\r\n                    <Input placeholder=\"Please enter email\" />\r\n                  </Form.Item>\r\n                </Col>\r\n                                                                                  {/* Input the phone number*/}\r\n                <Col span={12}>\r\n                  <Form.Item\r\n                    name=\"phone\"\r\n                    label=\"Phone\"\r\n                    rules={[\r\n                      { required: true, message: \"Phone number is Required\" },\r\n                    ]}\r\n                  >\r\n                    <Input placeholder=\"Please enter phone number\" />\r\n                  </Form.Item>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <label>Address</label>\r\n              </Row>\r\n              <Row gutter={16}>\r\n                                                                                    {/* Input the street name */}\r\n                <Col span={8}>\r\n                  <Form.Item\r\n                    name=\"street\"\r\n                    rules={[\r\n                      { required: true, message: \"Street name is Required\" },\r\n                    ]}\r\n                  >\r\n                    <Input placeholder=\"Please enter Street name\" />\r\n                  </Form.Item>\r\n                </Col>\r\n                                                                                        {/* Input City Name */}\r\n                <Col span={8}>\r\n                  <Form.Item\r\n                    name=\"city\"\r\n                    rules={[\r\n                      { required: true, message: \"city name is Required\" },\r\n                    ]}\r\n                  >\r\n                    <Input placeholder=\"Please enter City name\" />\r\n                  </Form.Item>\r\n                </Col>\r\n                                                                                  {/* Input Zip Code of the city */}\r\n                <Col span={8}>\r\n                  <Form.Item\r\n                    name=\"zipcode\"\r\n                    rules={[{ required: true, message: \"zipcode is Required\" }]}\r\n                  >\r\n                    <Input placeholder=\"Please enter Zip code\" />\r\n                  </Form.Item>\r\n                </Col>\r\n              </Row>\r\n            </Form>\r\n          </Drawer>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\n//Use ant design components\r\nimport {Button, Row, Col } from \"antd\";\r\n\r\n//Nav bar contains the title/logo and button for adding new contact\r\nconst NavBar = (props) => {\r\n  const {handleAdd} = props;\r\n  return (\r\n    <div>\r\n\r\n      <Row className='header'>\r\n\r\n        <Col span={4}><h1>Contact List</h1></Col>\r\n      \r\n        <Col span={2} offset={18}>\r\n          <Button type='primary' onClick={handleAdd}>Add Contact</Button>\r\n        </Col>\r\n      \r\n      </Row>\r\n    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\n//Use ant design component\r\nimport {Button} from 'antd';\r\n\r\n//Contacts table for visualizing the contact in the table format\r\nconst ContactTable = (props) => {\r\n    const { list , handleEdit , handleDelete} = props;\r\n\r\n    return (\r\n        <div>\r\n            <table id='contact-table'>\r\n                <thead>\r\n                    <tr>\r\n                    <th> S.No </th>\r\n                    <th> Name </th>\r\n                    <th> Email </th>\r\n                    <th> Street </th>\r\n                    <th> City </th>\r\n                    <th> Zip code </th>\r\n                    <th> Phone </th>\r\n                    <th> Website </th>\r\n                    <th> Action </th>\r\n                   </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {list && list.map((contact,index) => {\r\n                        return  <tr key={contact.id}>\r\n                            <td> {index+1} </td>\r\n                            <td> { contact.username} </td>\r\n                            <td> { contact.email} </td>\r\n                            <td>{contact.street}</td>\r\n                            <td>{contact.city}</td>\r\n                            <td>{contact.zipcode}</td>\r\n                            <td> { contact.phone} </td>\r\n                            <td> { contact.website} </td>\r\n                            <td className='action'> <Button type=\"link\" onClick={() => handleEdit(contact.id)}><i className=\"fas fa-pencil-alt\"></i></Button>  <Button type='link' style={{color:'red'}} onClick = {() => handleDelete(contact.id)}><i className=\"fas fa-trash\"></i></Button></td>\r\n                        </tr>\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContactTable;","//Base url \r\nconst url = \"https://jsonplaceholder.typicode.com/users\";\r\n\r\n//function for making GET request to api for fetching the contacts\r\nexport const getContacts = async () => {\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.log(\"Something went wrong !!!!!\", error);\r\n  }\r\n};\r\n\r\n//function for making DELETE request via api for deleting the contact \r\nexport const deleteContact = async (id) => {\r\n    try {\r\n      return await fetch(url+`/${id}`,{method:'DELETE'});\r\n\r\n    } catch (error) {\r\n      console.log(\"Something went wrong !!!!\", error);\r\n    }\r\n  };\r\n  \r\n//function for making PUT / POST api request for updating / adding new contact \r\nexport const apiRequest = async (Type, addUrl, values) => {\r\n\r\n    try {\r\n    const addInUrl = Type==='PUT'?'/1':''\r\n\r\n    const option = {\r\n      method: Type,\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ values }),\r\n    };\r\n\r\n    const apiData = await fetch(url+addInUrl,option);\r\n\r\n    const data = await apiData.json();\r\n\r\n    return data;\r\n\r\n    } catch (error) {\r\n        console.log(\"Something went wrong !!!!!!\", error);\r\n  }\r\n\r\n};\r\n","import React, { useState, useEffect } from \"react\";\n//Use ant design component\nimport { Skeleton } from 'antd';\n//Components\nimport { NavBar, ContactForm , ContactTable } from \"./\";\n//Helpers\nimport { getContacts , apiRequest, deleteContact} from '../helpers/utils';\n\nconst App = () => {\n  //contact-list\n  const [list, setList] = useState([]);\n  //flag for showing/hidding drawer \n  const [visible, setVisible] = useState(false);\n  //values for contact form in drawer\n  const [values,setValues] = useState({});\n  //for handling loading\n  const [loading,setLoading] = useState(false);\n  //generating id for new contact\n  const [ContactID,setNewContactID] = useState(11);\n\n  //function which shows the contact form / side drawer\n  const showDrawer = () => {\n    setVisible(true);\n  };\n\n  //function for hiding the contact form / side drawer\n  const onClose = () => {\n    setVisible(false);\n  };\n\n  //function for handling the save / submit action in contact form \n  //PUT and POST Api requests\n  const onFinish = async(inputs) => {\n\n    let type = 'POST';\n    //if present already , make a put request\n    const findInList = list.findIndex((item) => item.id === inputs.id);\n    if(findInList !== -1){\n      type = 'PUT'; \n    }\n\n    setLoading(true);\n\n    const data = await apiRequest(type,'',inputs);    \n    const index = list.findIndex(item => item.id === data.values.id);\n    if(index !== -1 ){\n      //update in list\n      list[index] = data.values;\n      setList(list);\n   \n    }else{\n      //add in list\n      setList([data.values,...list]);\n    }\n    setLoading(false);\n  \n  }\n\n  //function for handling add contact action\n  const handleAdd = () => {\n    setNewContactID(1+ContactID);\n    setValues({ id:ContactID});\n    showDrawer();\n  }\n\n  //function for updating the contact\n  const handleEdit = (contactId) => {\n\n    //finding the contact \n    const index = list.findIndex(contact => contact.id===contactId);\n    if(index !== -1)\n    {\n      //set values for pre-loading the contact form data / side drawer field values\n      const contact = list[index];\n      setValues(contact);\n    }\n      showDrawer();\n  }\n\n  //function for deleting the contact\n  const handleDelete = async(id) => {\n    \n    setLoading(true);\n    \n    await deleteContact(id);\n    \n    const updatedList = list.filter((item)=> {\n        return item.id !== id;\n    });\n    \n    setList(updatedList);\n    setLoading(false);\n  }\n\n  //loading the contacts from an api \n  useEffect(() => {\n    loadData();\n  }, []);\n\n  //function for handling the loaded contacts\n  const loadData = async() => {\n\n    setLoading(true);\n    //fetching the contacts\n    const data = await getContacts();\n    //saving in state i.e. list\n    const formatList = data.map((item) => {\n      return { \n        id:item.id,\n        username:item.username,\n        email:item.email,\n        phone:item.phone,\n        website:item.website,\n        street:item.address.street,\n        city:item.address.city,\n        zipcode:item.address.zipcode\n    }});\n\n    setList(formatList);\n    setLoading(false);\n  } \n\n  return (\n    <div className=\"App\">\n\n      <NavBar onClose={onClose} handleAdd={handleAdd} />\n      <ContactForm visible={visible} loading={loading} values={values} onFinish={onFinish} onClose={onClose} /> \n      <ContactTable list={list} handleEdit={handleEdit} handleDelete={handleDelete} />\n      {loading && <Skeleton active />}      \n   \n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}